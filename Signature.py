from Crypto.PublicKey import RSA
from Crypto.Signature.pkcs1_15 import PKCS115_SigScheme
from Crypto.Hash import SHA256
import binascii

#Public key (e,n)
#Private key (d,n)

class Signature:
    def __init__(self,n,e,d):
        self.rsaKey=RSA.construct((int(n), int(e), int(d)))
        self.pubKey=self.rsaKey.publickey()

    def Signaturing(self,msg):
        hash = SHA256.new(bytes(str(msg),encoding='utf-8'))
        signer = PKCS115_SigScheme(self.rsaKey)
        return signer.sign(hash)
        
    def Verify(self,wantVerifyMsg,msg):
        hash = SHA256.new(bytes(str(msg),encoding='utf-8'))
        verifier = PKCS115_SigScheme(self.pubKey)
        try:
            verifier.verify(hash, wantVerifyMsg)
            return True
        except:
            return False

# Generate 2048-bit RSA key pair (private + public key)
#keyPair = RSA.generate(bits=2048,e=65537)
#pubKey = keyPair.publickey()

# n = 516178258774119442105981779372789711902830347906148032388781293622144816353544107301993698851190035840655707907321157591537176534862441204214090471230931393695998448695148887848394701710455760201523260552655000073524265660311935255961631304604948471310989221720554376277348917060633405953674831424667143963002617035905587883288328493811404499830237556113886917317815258558738857433062460216442608579569314863776828689547566763011008080739052476606089897359109290970290777931136097255836081866089327565814267035394029524811976047701205845082274937973199814343366647458825791493850327650456912249074393448281599764095539929080686345180829781104936110559701008409488655616603680989397189889209280215630802609416409597517136627775685613463949239323267622320586652032852170349578605526225508956923633229847130217486691014086315600604080468669289801788649232806694730469089716272510638047134257130463941935279918033013104845556891109578591163446147931253344441831819828173380485669675607650600361440438683587839558040394022644030777110351988025959961387940981661837318596836762192926885570190146167724806165709077508105207848144458007818127906888589313159569819659696557335715111680728154797522326047357852534099288990248496439289934841157
# e = 65537
# d = 481688663657286675318028497839099641432371002902851844985780343246458224797443436751382129702932392571262367581609584753394733395167877369536679204717049943934874546062497759785039339109328369965130530370314089666853793113101871254163319152952216894402207589941340991262494546128053127871505338057430050055530678131161236305692167691907134540803174824249097396727389803972341593952900406517191770381758398438116839174746327846746528406882203508922825975291642980563056645814004629994849063807716116014923919974222623215564502969701242764751846600493842474413104313979688843800920065588089839927504947655675512738949787403729580328763280685459980528881431925950730449390509856297983194638323204213216882928661553595552586892435309343468695808074686277851668116029356449525119974135346291022046379938435029296013695802518935497053537325829302619246274352574300277492037568662290426768701264260542962923270731402299882413768251504244492167818854776082443970446012737018302184672069584230778704934517474523767457680608460085184371824680176577997221085742216050299633893744972310504365199821303768611365495351711954830333059359310218060010596225555600162217970659140518217436897773631335891396099603264350135699934395101467775060889495617
# rsa_key = RSA.construct((n, e, d))
# pubKey2=rsa_key.publickey()

#print(f"Public key:  (n={hex(keyPair.n)}, e={hex(keyPair.e)})")
#print(f"Private key: (n={hex(keyPair.n)}, d={hex(keyPair.d)})")
#print(f"Public key:  (n={keyPair.n}, e={keyPair.e})")
#print(f"Private key: (n={keyPair.n}, d={keyPair.d})")

# Sign the message using the PKCS#1 v1.5 signature scheme (RSASP1)
# msg = b
# hash = SHA256.new(msg)
# signer = PKCS115_SigScheme(rsa_key)
# signature = signer.sign(hash)
# print("Signature:", binascii.hexlify(signature))


# # Verify valid PKCS#1 v1.5 signature (RSAVP1)
# msg = b
# hash = SHA256.new(msg)
# verifier = PKCS115_SigScheme(pubKey2)
# try:
#     verifier.verify(hash, signature)
#     print("Signature is valid.")
# except:
#     print("Signature is invalid.")


# # Verify invalid PKCS#1 v1.5 signature (RSAVP1)
# msg = b'A tampered message'
# hash = SHA256.new(msg)
# verifier = PKCS115_SigScheme(pubKey2)
# try:
#     verifier.verify(hash, signature)
#     print("Signature is valid.")
# except:
#     print("Signature is invalid.")